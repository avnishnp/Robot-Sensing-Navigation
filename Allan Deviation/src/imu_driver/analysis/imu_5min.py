# -*- coding: utf-8 -*-
"""IMU_5Min.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sDbsTJNxsr6rwH0cH5MELrLZhV1Eh0U9
"""

import bagpy
from bagpy import bagreader
import pandas as pd
import seaborn as sea
import matplotlib.pyplot as plt
import numpy as np

b = bagreader('imu_ath1.bag')

# get the list of topics
print(b.topic_table)

data = b.message_by_topic('/imu')
print("File saved: {}".format(data))

pd.set_option('display.float_format', '{:.6f}'.format)

df_imu = pd.read_csv(data)
df_imu

def quaternion_to_euler_angle(w, x, y, z):
    ysqr = y * y

    t0 = +2.0 * (w * x + y * z)
    t1 = +1.0 - 2.0 * (x * x + ysqr)
    X = np.degrees(np.arctan2(t0, t1))

    t2 = +2.0 * (w * y - z * x)
    t2 = np.where(t2>+1.0,+1.0,t2)
    #t2 = +1.0 if t2 > +1.0 else t2

    t2 = np.where(t2<-1.0, -1.0, t2)
    #t2 = -1.0 if t2 < -1.0 else t2
    Y = np.degrees(np.arcsin(t2))

    t3 = +2.0 * (w * z + x * y)
    t4 = +1.0 - 2.0 * (ysqr + z * z)
    Z = np.degrees(np.arctan2(t3, t4))

    return X, Y, Z

quat_df=df_imu[['IMU.orientation.x','IMU.orientation.y','IMU.orientation.z','IMU.orientation.w']]

quat_df

import pandas as pd
from scipy.spatial.transform import Rotation

rot = Rotation.from_quat(quat_df)
rot_euler = rot.as_euler('xyz', degrees=True)
euler_df = pd.DataFrame(data=rot_euler, columns=['x', 'y', 'z'])

euler_df

fig=plt.figure(figsize=(12,4))
euler_df.hist('x')

plt.xlabel("Roll (radians)")
plt.ylabel("Frequency (Hz)")
plt.title("Roll Vs Frequency")
plt.show()

fig=plt.figure(figsize=(12,4))
euler_df.hist('y')

plt.xlabel("Pitch (radians)")
plt.ylabel("Frequency (Hz)")
plt.title("Pitch Vs Frequency")
plt.show()

fig=plt.figure(figsize=(12,4))
euler_df.hist('z')

plt.xlabel("Yaw (radians)")
plt.ylabel("Frequency (Hz)")
plt.title("Yaw Vs Frequency")
plt.show()

euler_df.drop('IMU.linear_acceleration.x',axis=1,inplace=True)

euler_df

euler_df.plot(x='Time',y='x')
plt.xlabel("Time (s)")
plt.ylabel("Roll (rad)")
plt.title("Time vs Roll ")

euler_df.plot(x='Time',y='y')
plt.xlabel("Time (s)")
plt.ylabel("Pitch (rad)")
plt.title("Time vs Pitch ")

euler_df.plot(x='Time',y='z')
plt.xlabel("Time (s)")
plt.ylabel("Yaw (rad)")
plt.title("Time vs Yaw ")

df_imu.plot(x='Time',y='IMU.linear_acceleration.x')
plt.xlabel("Time (s)")
plt.ylabel("Linear Acceleration [m/$s^2$]")
plt.title("Time vs Linear Acceleration (X) ")

df_imu.plot(x='Time',y='IMU.linear_acceleration.y')
plt.xlabel("Time (s)")
plt.ylabel("Linear Acceleration [m/$s^2$]")
plt.title("Time vs Linear Acceleration (Y) ")

df_imu.plot(x='Time',y='IMU.linear_acceleration.z')
plt.xlabel("Time (s)")
plt.ylabel("Linear Acceleration [m/$s^2$]")
plt.title("Time vs Linear Acceleration (Z) ")

df_imu.plot(x='Time',y='MagField.magnetic_field.x')
plt.xlabel("Time (s)")
plt.ylabel("Magnetic Field (Gauss)")
plt.title("Time vs Magnetic Field (X) ")

df_imu.plot(x='Time',y='MagField.magnetic_field.y')
plt.xlabel("Time (s)")
plt.ylabel("Magnetic Field (Gauss)")
plt.title("Time vs Magnetic Field (Y) ")

df_imu.plot(x='Time',y='MagField.magnetic_field.z')
plt.xlabel("Time (s)")
plt.ylabel("Magnetic Field (Gauss)")
plt.title("Time vs Magnetic Field (Z) ")

df_imu.plot(x='Time',y='IMU.angular_velocity.x')
plt.xlabel("Time (s)")
plt.ylabel("Angular Velocity (rad/s)")
plt.title("Time vs Angular Velocity (X) ")

df_imu.plot(x='Time',y='IMU.angular_velocity.y')
plt.xlabel("Time (s)")
plt.ylabel("Angular Velocity (rad/s)")
plt.title("Time vs Angular Velocity (Y) ")

df_imu.plot(x='Time',y='IMU.angular_velocity.z')
plt.xlabel("Time (s)")
plt.ylabel("Angular Velocity (rad/s)")
plt.title("Time vs Angular Velocity (Z) ")

linearacc_df=df_imu[['IMU.linear_acceleration.x','IMU.linear_acceleration.y','IMU.linear_acceleration.z']]

linearacc_df

fig=plt.figure(figsize=(12,4))
linearacc_df.hist('IMU.linear_acceleration.x')
plt.xlabel("Linear Acceleration [m/$s^2$])")
plt.ylabel("Frequency (Hz)")
plt.title("Frequency vs Linear Acceleration (X) ")

plt.show()

linearacc_df.hist('IMU.linear_acceleration.y')
plt.xlabel("Linear Acceleration [m/$s^2$]")
plt.ylabel("Frequency (Hz)")
plt.title("Frequency vs Linear Acceleration (Y) ")

linearacc_df.hist('IMU.linear_acceleration.z')
plt.xlabel("Linear Acceleration [m/$s^2$]")
plt.ylabel("Frequency (Hz)")
plt.title("Frequency vs Linear Acceleration (Z) ")

magfield=df_imu[['MagField.magnetic_field.x','MagField.magnetic_field.y','MagField.magnetic_field.z']]

fig=plt.figure(figsize=(12,4))
magfield.hist('MagField.magnetic_field.x')
plt.ylabel("Frequency (Hz)")
plt.xlabel("Magnetic Field (Gauss)")
plt.title("Frequency vs Magnetic Field (X) ")

plt.show()

magfield.hist('MagField.magnetic_field.y')
plt.ylabel("Frequency (Hz)")
plt.xlabel("Magnetic Field (Gauss)")
plt.title("Frequency vs Magnetic Field (Y) ")

magfield.hist('MagField.magnetic_field.z')
plt.ylabel("Frequency (Hz)")
plt.xlabel("Magnetic Field (Gauss)")
plt.title("Frequency vs Magnetic Field (Z) ")

angvel=df_imu[['IMU.angular_velocity.x','IMU.angular_velocity.y','IMU.angular_velocity.z']]

fig=plt.figure(figsize=(12,4))
angvel.hist('IMU.angular_velocity.x')
plt.ylabel("Frequency (Hz)")
plt.xlabel("Angular Velocity (rad/s)")
plt.title("Frequency vs Angular Velocity (X) ")

plt.show()

angvel.hist('IMU.angular_velocity.y')
plt.ylabel("Frequency (Hz)")
plt.xlabel("Angular Velocity (rad/s)")
plt.title("Frequency vs Angular Velocity (Y) ")

angvel.hist('IMU.angular_velocity.z')
plt.ylabel("Frequency (Hz)")
plt.xlabel("Angular Velocity (rad/s)")
plt.title("Frequency vs Angular Velocity (Z) ")

fig=plt.figure(figsize=(10,8))
ax = plt.axes(projection='3d')
ax.scatter(df_imu['MagField.magnetic_field.x'], df_imu['MagField.magnetic_field.y'], df_imu['MagField.magnetic_field.z'])
ax.set_xlabel('Magnetic Field X(Gauss)', labelpad=20)
ax.set_ylabel('Magnetic Field Y(Gauss)', labelpad=20)
ax.set_zlabel('Magnetic Field Z(Gauss)', labelpad=15)
ax.set_title("3D Projection Magnetic Field (X,Y,Z)")

fig=plt.figure(figsize=(8,6))
ax = plt.axes(projection='3d')
ax.scatter(df_imu['IMU.linear_acceleration.x'], df_imu['IMU.linear_acceleration.y'], df_imu['IMU.linear_acceleration.z'])
ax.set_xlabel('Linear Acceleration X(m/$s^2$)', labelpad=7)
ax.set_ylabel('Linear Acceleration Y(m/$s^2$)', labelpad=7)
ax.set_zlabel('Linear Acceleration Z(m/$s^2$)', labelpad=7)
ax.set_title("3D Projection Linear Acceleration (X,Y,Z)")

fig=plt.figure(figsize=(8,6))
ax = plt.axes(projection='3d')
ax.scatter(df_imu['IMU.angular_velocity.x'], df_imu['IMU.angular_velocity.y'], df_imu['IMU.angular_velocity.z'])
ax.set_xlabel('Angular Velocity X(rad/s)', labelpad=7)
ax.set_ylabel('Angular Velocity Y(rad/s)', labelpad=7)
ax.set_zlabel('Angular Velocity Z(rad/s)', labelpad=7)
ax.set_title("3D Projection Angular Velocity(X,Y,Z)")

fig=plt.figure(figsize=(8,6))
ax = plt.axes(projection='3d')
ax.scatter(euler_df['x'], euler_df['y'], euler_df['z'])
ax.set_xlabel( 'Roll(rad)', labelpad=7)
ax.set_ylabel( 'Pitch(rad)', labelpad=7)
ax.set_zlabel( 'Yaw(rad)', labelpad=7)
ax.set_title("3D Projection Orientation")

gx= df_imu['IMU.angular_velocity.x']  # rad/s
gy= df_imu['IMU.angular_velocity.y'] 
gz= df_imu['IMU.angular_velocity.z']





angvel_AV=df_imu[['IMU.angular_velocity.x','IMU.angular_velocity.y','IMU.angular_velocity.z']].abs()
gx_AV= angvel_AV['IMU.angular_velocity.x'].abs()  # rad/s
gy_AV= angvel_AV['IMU.angular_velocity.y'].abs()
gz_AV= angvel_AV['IMU.angular_velocity.z'].abs()

angvel_AV.to_csv('gyro.csv',index=False)

fig, ax = plt.subplots(figsize=(12, 7))
gxyz=[gx,gy,gz]
ax.boxplot(gxyz)
plt.xticks([1, 2, 3], ['Gyro_X', 'Gyro_Y', 'Gyro_Z'])
plt.show()

def get_summary_statistics(dataset):
    
    mean = np.mean(dataset)
    median = np.median(dataset)
    min_value = dataset.min()
    max_value = dataset.max()   
    quartile_1 = dataset.quantile(0.25)
    quartile_3 = dataset.quantile(0.75)   # Interquartile range
    iqr = quartile_3 - quartile_1    
    print('Min: %s' % min_value)
    print('Mean: %s' % mean)
    print('Max: %s' % max_value)
    print('25th percentile: %s' % quartile_1)
    print('Median: %s' % median)
    print('75th percentile: %s' % quartile_3)
    print('Interquartile range (IQR): %s' % iqr)

print('\n\nGyro X summary statistics')
get_summary_statistics(gx)

print('\n\nAccelerometer X summary statistics')
get_summary_statistics(df_imu['IMU.linear_acceleration.x'])