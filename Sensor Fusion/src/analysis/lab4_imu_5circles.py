# -*- coding: utf-8 -*-
"""Lab4 IMU_5Circles.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18BhBaQTB7ljln8CO9aows0KWpaAiVJpp
"""

!pip install bagpy

import bagpy
from bagpy import bagreader
import pandas as pd
import seaborn as sea
import matplotlib.pyplot as plt
import numpy as np

b = bagreader('circles1.bag')

# get the list of topics
print(b.topic_table)

data = b.message_by_topic('/imu')
print("File saved: {}".format(data))

data1 = b.message_by_topic('/gps')
print("File saved: {}".format(data))

# pd.set_option('display.float_format', '{:.6f}'.format)

df_gps = pd.read_csv(data1)

df_imu = pd.read_csv(data)
df_imu

def quaternion_to_euler_angle(w, x, y, z):
    ysqr = y * y

    t0 = +2.0 * (w * x + y * z)
    t1 = +1.0 - 2.0 * (x * x + ysqr)
    X = np.degrees(np.arctan2(t0, t1))

    t2 = +2.0 * (w * y - z * x)
    t2 = np.where(t2>+1.0,+1.0,t2)
    #t2 = +1.0 if t2 > +1.0 else t2

    t2 = np.where(t2<-1.0, -1.0, t2)
    #t2 = -1.0 if t2 < -1.0 else t2
    Y = np.degrees(np.arcsin(t2))

    t3 = +2.0 * (w * z + x * y)
    t4 = +1.0 - 2.0 * (ysqr + z * z)
    Z = np.degrees(np.arctan2(t3, t4))

    return X, Y, Z

quat_df=df_imu[['IMU.orientation.x','IMU.orientation.y','IMU.orientation.z','IMU.orientation.w']]

quat_df

import pandas as pd
from scipy.spatial.transform import Rotation

rot = Rotation.from_quat(quat_df)
rot_euler = rot.as_euler('xyz', degrees=True)
euler_df = pd.DataFrame(data=rot_euler, columns=['x', 'y', 'z'])

df_imu.plot(x='Time',y='MagField.magnetic_field.x')
plt.xlabel("Time (s)")
plt.ylabel("Magnetic Field (Gauss)")
plt.title("Time vs Magnetic Field (X) (Before correction) ")

df_imu.plot(x='MagField.magnetic_field.y',y='MagField.magnetic_field.x')
plt.xlabel("Magnetic Field X(Gauss)")
plt.ylabel("Magnetic Field Y(Gauss)")
plt.title("In Circles(without correction) ")

magX= (df_imu['MagField.magnetic_field.y'])  # Gauss
magY= (df_imu['MagField.magnetic_field.x'] )
magZ= (df_imu['MagField.magnetic_field.z'])

pip install lsq-ellipse

from ellipse import LsqEllipse
from matplotlib.patches import Ellipse
# avalible in the `example.py` script in this repo
X1=magX
X2=magY

X = np.array(list(zip(X1, X2)))
reg = LsqEllipse().fit(X)
center, width, height, phi = reg.as_parameters()

print(f'center: {center[0]:.3f}, {center[1]:.3f}')
print(f'width: {width:.3f}')
print(f'height: {height:.3f}')
print(f'phi: {phi:.3f}')

fig = plt.figure(figsize=(8, 6))
ax = plt.subplot()
ax.axis('equal')
ax.plot(X1, X2, 'go', zorder=1)
ellipse = Ellipse(
    xy=center, width=2*width, height=2*height, angle=np.rad2deg(phi),
    edgecolor='b', fc='None', lw=2, label='Fit', zorder=2
)
ax.add_patch(ellipse)

plt.xlabel('MagX(Gauss)')
plt.ylabel('MagY(Gauss')
plt.title("Fitting an ellipse")
plt.legend()
plt.show()

mx=magX-center[0]
my=magY-center[1]
mt = np.stack((mx, my),axis=1)

mt

fig = plt.figure()
ax1 = fig.add_subplot(111)
ax1.scatter(magX,magY,label='original')
ax1.scatter(mx,my,label='Correction')
ax1.set_xlabel('MagX(Gauss)')
ax1.set_ylabel('MagY(Gauss)')
ax1.set_title('Hard Iron corrections')
plt.legend(loc='upper right')

import math
# % soft-iron corrections
# % rotation, align the major axis of the ellipse with the reference frame X axis
theta = phi
rotation_matrix = [[math.cos(theta), -math.sin(theta)],
                   [math.sin(theta), math.cos(theta)]]
mag_new_xy = np.matmul(rotation_matrix,mt.transpose())
mt = mag_new_xy.transpose()

a= width
b=height
# % scale, scalling the major axis such that the ellipse is converted to a circle
scale_factor = a / b
mx = mx / scale_factor

# % back-rotation, rotating the data back to their original position
theta_back = -theta;
rotation_matrix_back = [[math.cos(theta_back), -math.sin(theta_back)],
                        [math.sin(theta_back), math.cos(theta_back)]]
mag_new_xy_back = np.matmul(rotation_matrix_back,mt.transpose())
mt = mag_new_xy_back.transpose()

fig = plt.figure()
ax1 = fig.add_subplot(111)
ax1.scatter(magX,magY,label='original')
ax1.scatter(mt[:,0],mt[:,1],label='Correction')
ax1.set_title('Soft Iron corrections')
ax1.set_xlabel('MagX(Gauss)')
ax1.set_ylabel('MagY(Gauss)')
ax1.set_title('Soft Iron corrections')
plt.legend(loc='upper right')

plt.plot(df_imu['Time'],mt[:,0])
plt.xlabel("Time (s)")
plt.ylabel("Magnetic Field (Gauss)")
plt.title("Time vs Magnetic Field (X) (After correction)")

